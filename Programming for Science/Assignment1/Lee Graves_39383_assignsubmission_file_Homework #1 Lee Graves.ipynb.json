{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def fib(n):    # write Fibonacci series up to n,  # Some Code Borrowed from Python Tutorial \n",
    "    a, b = 0, 1\n",
    "    numbers = []\n",
    "    while a < n:\n",
    "        numbers.append(a)\n",
    "        a, b = b, a+b \n",
    "    print(numbers) # List of Numbers in sequence\n",
    "    print(len(numbers))  # Length of Number List\n",
    "    print (sum(numbers)) # Total Sum of Nummber List\n",
    "    print(sum(numbers)/(len(numbers))) # Avg distance beteen numbers in sequence\n",
    "    if (len(numbers)) < 15:\n",
    "        return ('yes... this works!', numbers)\n",
    "    else:    \n",
    "        return ('no... too many numberss in sequence')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]\n",
      "15\n",
      "986\n",
      "65.73333333333333\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'no... too many numberss in sequence'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fib(500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]\n",
      "15\n",
      "986\n",
      "65.73333333333333\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'no... too many numberss in sequence'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fib(450)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]\n",
      "14\n",
      "609\n",
      "43.5\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "('yes... this works!', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fib(300)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
